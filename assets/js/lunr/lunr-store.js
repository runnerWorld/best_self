var store = [{
        "title": "1年12个项目",
        "excerpt":"   今天来聊下数字游民狂人Pieter Levels， 我更喜欢称他是项目狂人，因为他1年创建了12个项目，没有很强的行动力，恐怕连半数项目都做不来。12个项目当中获取有很好的创业idea，也可能激发你创业的idea，谁知道呢？   Play My Inbox  Levels和他朋友有个习惯，他们对于喜爱的歌曲，他们会将歌曲链接放入邮件发给对方。基于这个习惯，他开发了这个产品，将收件箱的喜爱歌曲获取出来然后循环播放。个人非常喜欢这个idea。   Go Fucking Do It  每个人在可接受的压力下，是可以迫使自己达到一定的目标。这个产品就是这么来的。设置一个目标和一个实际的时间，如果到了时间节点你没法达到目标，你压在网站的钱就会没收了。。。   Tubelytics  这个产品是一个服务自媒体的数据分析平台。实时监控并查看视频平台各频道的情况。但2015年时候这个产品就停止了。   NomadList  大名鼎鼎的NomadList,方便用户能够了解世界上哪个城市能够更好的生活和远程工作。主要参数有生活成本，天气（这个太重要了），网速   NomadJobs  只为创业公司提供的职位发布平台，并且完全按照Levels的作风，只能是远程工作。   GifBook  上传你喜欢的Gif图，然后将图片变成动画书，类似小时候一个动作需要画很多张图，然后快速的翻这些图，这个动作就活动起来了。有时候老外的想法比较奇特。。。   Nomads  一个很酷的数字游民聊天社区。在社区里面你可以了解很多世界各地的资讯。   Remote|OK  这个产品厉害了。主要是展示远程工作职位的，不同于传统的招聘网站，不能够发布职位，产品是采集那些远程职位然后进行展示的。   然后，貌似没有12个项目呢，有些栏目可能烂尾了。。。从以上项目可以看出，基本上Levels一个人活出了一个团队，很有想法的全栈的工程师。  ","categories": ["sideproject"],
        "tags": [],
        "url": "/sideproject/1year-12-projects/",
        "teaser": null
      },{
        "title": "解决一个小问题比尝试解决五个大问题要好得多",
        "excerpt":"今天分享个因为付费，所以自己做个车轮的故事。本文的标题出自今天主人公开发平台一路的心路历程。   Dirk 是个在阿姆斯特丹的软件工程师。他在做自己的一个项目时候，发现有个视频截屏API需要付费，一琢磨，就自己做了个，并且挂到网站，以SaaS的模式开始了盈利。   平台介绍   一切要从开始做个兴趣网站说起，Dirk 决定做一个关于新闻文章目录的网站，在首页的时候，他想展示一个文章索引的截屏图片，这样子需要一个自动截屏的功能。然后他就决定搜索一下相关功能API。好不容易找到一个挺满意的，但是需要35块钱一个月，因为是兴趣项目，所以也没法接受付费。琢磨了下干脆自己开发一个。   每天1到2个小时，努力了1个多月，终于把MVP(最小化可用产品)做了出来，其中也包含一些小功能。这就是今天介绍的Screenhsotapi.net      平台主要用Laravel搭建，前端主要用js和vue框架，其中还用了 Selenium。   关于引流和盈利模式   平台目前采用g家的付费广告，每个月花费大概在100块这个样子。目前盈利平均400块。关于投入付费广告的策略可以参考我以前的文章，主要就是使用工具去查看竞争对手网站或者相关的检索关键字，根据检索关键字做付费广告。相关工具有Ahrefs 和 SimilarWeb   平台使用SaaS模式，有个入门的免费套餐，提供100个截屏每月，收费从9块开始，相比之前的35块还是便宜的多。   写在后面   由于是个开发人员，对于市场这块还是摸索着来，所以平台还在慢慢成长。Dirk也对未来平台推广吸引用户策略，一是完善SEO，二是通过blog 让更多用户能够了解平台。  ","categories": ["sideproject"],
        "tags": [],
        "url": "/sideproject/fix-problem-bigger-than-five/",
        "teaser": null
      },{
        "title": "纸牌游戏也可以盈利",
        "excerpt":"多年前。当学校开始开设Windows课程。老师上课的时候，或者大家操作电脑学习的时候，身边的很多童鞋都在玩扫雷或者纸牌接龙。今天和大家分享的是纸牌游戏，我们的主人公通过纸牌游戏也可以赚取被动收入，并且进一步去做更多其他感兴趣的事情。   Holger, 一个来自丹麦哥本哈根的设计师。设计师的功底，后转开发，并构建纸牌游戏而且盈利。最初Holger开发了游戏后，获得了每个月大概800美金的收入，最初版本是Mac单机版，通过Mac App Store下载。但去了纽约创业开办公司，很不幸，公司被竞争对手打败。通过这次创业，Holger不得不从新出发。   Holger一直对纸牌游戏情有独钟。重新构建了产品。Online Solitaire，目前每个月的盈利在1500美金。      关于更多-盈利，运营以及技术   开始时候，Holger通过一篇文章受到启发。这篇文章是关于如何把副业做成生意，从而获得被动收入。所以他很聪明的认识到，他不需要重新造轮子，而是做一些市场上成功的产品。最终他打算优化之前的纸牌游戏，但是创业期间，产品没有维护，随着系统平台不算升级，产品有很多bug。所以他打算做成在线的。 在这之前，他做了一些研究。他写了个脚本抓取AppAnnie应用商店的App评价，得出结论要做个单人版的纸牌游戏。分析情况如下图：      Mac版本开发在三到四个礼拜，在线版本的开发时间也花了Holger三到四个礼拜时间，初始版本开发出来后，升级以及优化就一直有在做。   在线版本主要是采用React的技术栈来做的。用Firebase做的数据库。动画方面使用了GSAP这个库。单机版本采用ToDesktop 这个转换工具来进行各个终端转换，Windows, Mac, Linux 都可以，目测网站上介绍。   在线版的纸牌运营主要靠SEO检索。当用户想玩的时候就会上网去搜索，毕竟纸牌人人都知道，所以也不会像其他SaaS 产品一样会有一些介绍文章。通过火狐的页面优化工具来提升检索效果，目前得到g家每天的1000多次点击。   纸牌游戏会有人付费么？答案是否定的。没人会付费玩。所以目前收入主要是广告收入。广告收入主人公也有一些心得。开始用g家的广告，但是每天获利才是10块，后面更换Monumetric，有25块一天，目前使用Freestar，将近50块一天。如果通过广告获益，那么多尝试几个。   写在后面   我觉得Holger真的很能够认清现实，即使目前依然能够盈利，但是他说他不希望这个成为他依靠的收入来源，现在市场真的有很多竞争者，竞争很激烈。   话说回来，只要有心，依靠数据分析，即使是很老旧的游戏也会有市场，所谓存在即有道理。关于文中Holger提到的受启发文章，找个时间我再写个分享上来。  ","categories": ["sideproject","startup"],
        "tags": [],
        "url": "/sideproject/startup/card-game/",
        "teaser": null
      },{
        "title": "从内容营销到iOS开发，月入14000美金——在产品还没投放就应该开始营销",
        "excerpt":"引言   周末清明需要回老家，所以耽搁了，抱歉。今天分享的故事是关于个人数据App的。主人公叫Belle,之前从事市场营销，现从事iOS开发，与小伙伴Josh创业开了个公司，叫做HelloCode。目前在澳大利墨尔本。主打产品是Exist, 是一款集成了个人数据的App。凭借这款产品目前月入14000美金。公司还有款产品叫做larder。这是款类似书签的产品，也比较有趣。今天主要说下Exsit。如图。   Exis能够展示今日步数，睡眠时间以及一些应用的个人信息，通过这些信息展示将让用户更清晰了解自己每日情况，譬如获取了todo信息，那么就分析哪天事情处理效率，获取了日历信息，就知道哪天工作多等。   目前链接的应用在产品页面都可以找得到，有apple watch, google fit, garmin, strava, github,todolist等。按月收费和按年收费。      历程   最初。Belle还在还在Buffer公司，就已经研究要开发Exist了，当成一个业余项目来开发。小伙伴 Josh 构建了MVP(最小化可实行产品)，Belle则从事老本行，营销。由于是一个业余的项目，所以进度不是很快。Josh是一个自由职业者，所以也不能够全职来做Exist。Belle和Josh 打算做一个众筹，以一个比较低的价格来让用户进行支付，以便支撑他们能够全职进行产品。虽然众筹没能够达到他们的期望值，但是这个事情让他们有了继续往下开发好这个产品的信心。   最初的最初，Exist是一个响应式的App。并不是手机原生态的App。Belle一直在自学iOS的开发。而Josh也在捣鼓Android的开发。 Josh的本行是web开发。在2014是移动App开始盛行的年代，他们也意识到必须要把产品转到原生态App，从那时候起产品就一直迭代。   关于盈利   由于是不断获取个人数据，服务器配置需要跟上，所以一开始就是付费服务。这个想法也一直是他们所努力的方向。用户可以免费使用30天，然后要么转付费要么就删用户，虽然一开始注册需要绑定信用卡等信息，但是这样也过滤的免费的用户，更精准的转化用户，也算一种zhezong   关于推广   Belle之前在公司时候就了解某些时候公开透明一些业务是对于用户扩展很有帮助的。所以做Exist时候就公开了收入信息以及一些feature，让用户去投票以便于更好把握用户关注的功能。   在14，15年的时候，人们很关心个人的量化数据，正因为这个契机，App也很快收到用户的追捧。同时Belle也会写Blog，并且在相关内容的网站投稿（Lifehacker和Zapier），并且获得引流，因为也是内容网站，所以也会需要内容（正如我们今天的今日头条，知乎之类的）。刚好还有个契机，默林·曼恩（Merlin Mann）的大牛在播客中多次提到Exist，也涌入不少注册会员。   写在后面   Exist很难实现，其实不是，很多应用会提供Api，把数据抓取然后放在手机App上展示，就是最简单Exist的原型。其实难的是在做产品前要把产品推出去验证想法，有用户买单了才体现价值。  ","categories": ["sideproject","startup"],
        "tags": [],
        "url": "/sideproject/startup/content-market-ios/",
        "teaser": null
      },{
        "title": "一个月入1.7万的退休项目",
        "excerpt":"简介  今天要分享的主人是Michael, 他从2015年开始做QuotaGurad， 这是是一个静态ip和动态ip代理产品。Michael住在美国内华达州的拉斯维加斯。但是他去过很多地方，包括中国，波兰，香港和1/4个美国。有20年的软件开发和安全经验。曾在2014年尝试退休。但感觉无聊和担心技术落伍就重抄旧业；      QuotaGurad主要是基于云服务的应用提供服务，从15年开始，目前业务发展到2000多个客户。   构建产品缘起一个同行，产品开发到一半，但是不想继续开发下去，由新的想法，Michal了解想法后就接手了。在这一过程当中令他印象最深的就是因为不是由0开始，而是在现有一套代码上继续开发，这套代码又有用户在使用，所以即使后期有新的解决方案要重构代码，也要分两部分进行，保持现有代码用户不受影响的情况下构建新的解决方案，维护成本倍增。   关于产品的技术架构   QuotaGurad使用主要使用go语言来编写，因为Michael觉得go比较快以及方便部署；Ruby用来做后台管理以及外部应用集成；集成Stripe来实现支付；   关于运营以及商业模式  Mihael主要在      StackOverflow / Quora等在线平台上进行答疑并介绍QuotaGurad，以此来引流；   Google Adwords投放广告   Landingpage, 是广告转化的客户能够更加容易了解产品   Microsoft Azure  和 IBM Cloud，投放相关云服务平台   门户网站影响，用户可以在上面了解价格，解答   QuotaGurad 使用saas模式，按每月付费进行服务，大概有75%的用户是付费的，也推出免费的服务给用户进行体验，但有一个准则就是，免费的体验是有时效的。   写在后面   其中令我印象最深的还是，第一要有积蓄，Michael花的就是自己的积蓄，没有任何众筹或者投资，这样子确保自己能够不受其他方面的影响；第二就是只实现最主要的功能，把最主要功能实现好，第二第三功能都可以放一放。  ","categories": ["sideproject","startup"],
        "tags": [],
        "url": "/sideproject/startup/17k/",
        "teaser": null
      },{
        "title": "如何在Rails 项目里面加入图表",
        "excerpt":"在这篇文章里面，我们用到Chart.js，这是一个图表的js库。整个集成过程比较简单，运用到实际的项目需要自己考虑项目的情况，这里只做一个简单展示。 第一步 我们直接引用cdn。打开的application.html.erb，加入这段代码 &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/chart.js@2.9.1/dist/Chart.min.css\"&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/chart.js@2.9.1/dist/Chart.min.js\"&gt;&lt;/script&gt; 第二步 然后新建一个页面，创建一个canvas &lt;canvas id=\"myChart\" width=\"960\" height=\"200\"&gt;&lt;/canvas&gt; 第三步 加入图表相关代码，直接在页面上写也是可以的。 &lt;script&gt; var ctx = document.getElementById('myChart'); var myChart = new Chart(ctx, { type: 'bar', data: { labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'], datasets: [{ label: '# of Votes', data: [12, 19, 3, 5, 2,...","categories": ["ruby on rails"],
        "tags": [],
        "url": "/ruby%20on%20rails/how-to-add-chart-to-rails/",
        "teaser": null
      },{
        "title": "Postgresql非本地连接设置",
        "excerpt":"机器在Ubuntu；   Step1 postgresql.conf   postgresql.conf存放位置在/etc/postgresql/x/main下，这里的是PostgreSQL的版本号，编辑或添加下面一行，使PostgreSQL可以接受来自任意IP的连接请求。   listen_addresses = '*'  Step2 pg_hba.conf   pg_hba.conf，位置与postgresql.conf相同，虽然上面配置允许任意地址连接PostgreSQL，但是这在pg中还不够，我们还需在pg_hba.conf中配置服务端允许的认证方式。nano. 打开该文件，编辑或添加下面一行。  host  all  all 0.0.0.0/0 md5   默认pg只允许本机通过密码认证登录，修改为上面内容后即可以对任意IP访问进行密码验证。对照上面的注释可以很容易搞明白每列的含义，具体的支持项可以查阅文末参考引用。   完成上两项配置后执行  sudo service postgresql restart  重启PostgreSQL服务后,允许外网访问的配置就算生效了。   如果是云服务器，检查一下是否屏蔽5432这个port  ","categories": ["postgresql"],
        "tags": [],
        "url": "/postgresql/postgresql-connection/",
        "teaser": null
      },{
        "title": "从500强企业中辞职出来创业",
        "excerpt":"   今天的主人公 Rachit Khator，Stackby.com的创始人。前500强企业员工，高薪福利好，在职时候就经常使用电子表格管理工作流程，但是也遇到很多麻烦，所以他也在寻求CRM或者项目管理软件去处理他碰到的问题，但是都不尽如人意。他通过他的渠道做了个小调研，收集大家碰到的情况。便毅然的在2018年美国500强公司辞职了，并且去到印度开公司。   当时回到印度碰到的第一个问题就是人手，Rachit Khator所在的城市，是以纺织品和钻著称的，所以要搭建一支技术团队还是比较慢的，就这样不断招人和完善产品，历经两年，产品问世。其中的反差就是之前领的6位数工资以及舒适的岗位，到两年0收入。后来Rachit  说其实还是想拥有自己产品的执念支撑。   产品的盈利模式很简单，也是目前流行的。有三种收费套餐，免费套餐，标准套餐以及定制套餐。目前在1年的情况下已经累积了4千用户。现在每月盈利在5万美金。   关于 Stackby.com   Stackby.com 轻松的把电子表格打造成了一个数据库，使用人可以不需要懂任何数据库的技术（包括数据类型，索引一大堆数据库专有名词），不需要懂代码，轻松的就可以把自己的业务放到上面进行管理。也可以轻松去整合市面上的api，如脸书，油管，g家等，去读取上面的数据。项目管理，视频创作，市场营销这类场景统统试用。   Stackby.com 主要采用React作为前端，Node.js作为后端。整个js技术栈。   写在后面   其实若干年前，我就碰到一个以电子表格为基础的应用，一下子想不起来了。国内团队开发的。我们大多数做web开发的，以CRUD为核心，如果可以灵活改造电子表格，是可以解决大部分业务管理系统的需求的。无非就是灵活自定义数据类型，各种查询条件自定义，灵活创建自定义表单。使用户随心所欲的录入数据，然后在随心所欲查询，图形化展示，导出下载等  ","categories": ["startup"],
        "tags": [],
        "url": "/startup/quit-from-500/",
        "teaser": null
      },{
        "title": "快速处理csv",
        "excerpt":"今天看到个文章，是说处理csv的。csv虽说挺方便，可以简单管理关系型数据，不需要买个office365来处理。笔者说处理csv文件是个头痛的问题，链接附上处理csv的代码，但是如果出来的行数足够大，那也是挺恐怖。   图1      使用SmarterCSV。简单对比。   图2      总结  关于SmarterCSV还没得细看，看起来不错，做个记录。联想起之前项目也有生成csv过程，但是直接扔进数据库比较多，而且还是可以迭代处理，感觉不需要单个列 写出来。  ","categories": ["Ruby"],
        "tags": [],
        "url": "/ruby/csv-gem/",
        "teaser": null
      }]
